Functionality:
  - MVP:
    - Landing page with features, subscription options and signup 
    - Auth for 2 roles - free user and administrator with captcha
    - Upload RAW files with option for multiple files with user and global quota check
    - Display file list - thumbnails
    - Display image with details and download option
    - Quick search by file names
    - Favorite option for images
    - Delete image
    - Dashboard (with the favorite images)
    - Administrator page (app stats, users, roles and used / total quota)
    - Profile page (connection details, registration date, image count, favorite count and used quota) 
    - Account: Email confirmation, account (password) recovery and password change
    - Cloudflare proxy with cool domain name and e-mail forwarding
    - Support HTTPS and database encryption
    - Docker containers for backend and frontend 
    - Docker compose for running everything locally
    - Terms of use for registration
    - Cookie warning for EU countries
    - Deployed on AWS - running in docker on EC2 free tier with ALB, hostname and CloudFlare protection
    ----
    - Whitelist only CloudFlare domain !!!
    - Integrate with at least 1 CDN: Amazon S3
    - Add history/audit - with SNS a DynamoDB
    - Add lifecycle rules - with eventbridge trigger and lambdas
    - Add OpenID for Google/Facebook (https://codesandbox.io/s/react-zuxv1?file=/src/SignIn.tsx:997-1177, https://firebase.google.com/docs/auth/web/google-signin)
    - Testing (handlers and unit testing) - Backend and Frontend
    - Fix PhotoGrid selection display mechanism
    - Fix editing users and roles on admin page
    - Fix search filter page reload
  - Next steps:
    - Advanced concurrency for file upload
    - Add rating option for images
    - Add tags for images
    - Generative AI based on the decisions of the user (1to5 rating) to advise a score
    - Extract constants and Status/Error variables on top of Go modules
    - Refactor with dependency injection (no framework)
    - HATEOAS - links for objects
    - Create secondary image (~FHD size), optional on user preferences - for better image display
    - Add tooltips and info icons everywhere
    - Have a "rows" type of view for photos - photo with details next to it, potentially dwonload and favorite buttons
    - Add filtering, ordering and pagination for images
    - Add grouping for images
    - Add batch uploading files
    - Add personal lifecycle rules
      - archive files after Y days
      - delete files after X days
      - keep favorites for indefinite
      - needs user preferences & CRONs
    - Implement advanced search (fulltext search with ES)

Backend:
- Add CSRF - https://www.stackhawk.com/blog/react-csrf-protection-guide-examples-and-how-to-enable-it/
- Move out GORM, use plain SQL instead
    - rewrite to plain SQL
    - create migration mechanism
- Think about integration tests
- Create microservices architecture
- Kubernetes IaC for microservices
- Free database: Elephantsql or Planetscale
- Free edge location: Vercel
