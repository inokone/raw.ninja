Functionality:
  - MVP:
    - Landing page with features, subscription options and signup 
    - Auth for 2 roles - free user and administrator with captcha
    - Upload RAW files with option for multiple files with user and global quota check
    - Images store: filesystem or AWS S3
    - Display file list - thumbnails
    - Display image with details and download option
    - Quick search by file names
    - Favorite option for images
    - Albums and Uploads as collections
    - Delete image
    - Dashboard (with the favorite images)
    - Administrator page (app stats, users, roles and used / total quota)
    - Profile page (connection details, registration date, image count, favorite count and used quota) 
    - Account: Email confirmation, account (password) recovery and password change
    - Cloudflare proxy with cool domain name and e-mail forwarding
    - Support HTTPS and database encryption
    - Docker containers for backend and frontend 
    - Docker compose for running everything locally
    - Terms of use for registration
    - Cookie warning for EU countries
    - Deployed on AWS - running in docker on EC2 free tier with ALB, hostname and CloudFlare protection
    ----
    - Create tag editor (+ display) for albums (MUI Chip component)
    - Replace table displays with an advanced component
    - Make album title editable
    - Create "delete album"
    - Improve PhotoGrid
      - Context menu configurable from props
      - Is selection enabled
      - Limit of images
    - Add photos to existing collections
    - Remove photos from collections
    - Make image.Service serve just a single image, and have one image service per size
      - 3 levels for images (instead of 2)
        - raw
        - thumbnails
        - NEW fullscreen

    - Display image count + used space per user on admin page
    - Display multiple image groups (by date or smg)
    - Create dark mode
    - Automate IaC
      - CloudFormation with
        - Frontend on S3, later possibly CloudFront
        - Backend docker uploaded to ECR
        - Backend running in ECS from ECR
        - ALB deployed by CF
        - CloudWatch logs by CF
        - Credentials should come from AWS Systems Manager Parameter Store
    - Status message object should have no status, object should be kept though - KISS
    - Add lifecycle rules - with eventbridge trigger and lambdas
    - Extract services from controllers. controllers should be about conversion between DB to JSON object
    - Encrypt settings file on EC2 - store private key to somewhere else - e.g. Google passwords 
    - Host frontend on S3 + cloudfront (https://aws.plainenglish.io/how-to-host-your-react-application-in-aws-s3-c0940cd4377b)
    - Add OpenID for Google/Facebook (https://codesandbox.io/s/react-zuxv1?file=/src/SignIn.tsx:997-1177, https://firebase.google.com/docs/auth/web/google-signin)
    - Add history/audit - with SNS and DynamoDB
    - Whitelist only CloudFlare domain !!!
    - Fix editing users and roles on admin page
    - Fix search filter page reload
    - Show quota on profile dropdown maybe?
  - Next steps:
    - Testing (handlers and unit testing) - Backend and Frontend
    - Investigate compression options for storage
    - Advanced concurrency for file upload
    - Add rating option for images (MUI Rating)
    - Add tags for images (MUI Chip)
    - Generative AI based on the decisions of the user (1to5 rating) to advise a score
    - Extract constants and Status/Error variables on top of Go modules
    - Refactor with dependency injection (no framework)
    - HATEOAS - links for objects
    - Create secondary image (~FHD size), optional on user preferences - for better image display
    - Add tooltips and info icons everywhere
    - Have a "rows" type of view for photos - photo with details next to it, potentially dwonload and favorite buttons
    - Add filtering, ordering and pagination for images
    - Add batch uploading files
    - Add personal lifecycle rules
      - archive files after Y days
      - delete files after X days
      - keep favorites for indefinite
      - needs user preferences & CRONs
    - Implement advanced search (fulltext search with ES)

Backend:
- Add CSRF - https://www.stackhawk.com/blog/react-csrf-protection-guide-examples-and-how-to-enable-it/
- Move out GORM, use plain SQL instead
    - rewrite to plain SQL
    - create migration mechanism
- Think about integration tests
- Create microservices architecture
- Kubernetes IaC for microservices
- Free database: Elephantsql or Planetscale
- Free edge location: Vercel
