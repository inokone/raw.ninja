Functionality:
    - Landing page describing features, subscription options and social media
    - Signup with credentials or SSO (Google and Facebook) with Captcha
    - Login with credentials or SSO (Google and Facebook) with Captcha
    - Email address confirmation, account (password) recovery and password change
    - Terms of service and privacy policy documents
    - Cookie warning for EU countries
    - Logout
    - User types with user quota
      - Free tier
      - Administrator
    - Upload RAW and processed image files with user and global quota check
    - Batch upload image files, with permanent batch identifier
    - Image store:
      - Local filesystem
      - AWS S3
    - Thumbnail generation for all uploaded image
      - Extract thumbnail from RAW files
      - Generate thumbnail if can not be extracted or image is processes 
    - Image list view with
      - Selection mechanism
      - Mark as favorite
      - Download option
      - Delete option
      - Rating (on scale 1 to 5 stars)
    - Fullscreen zoomable photo-display with details
    - Create album from selected images and manage
    - Quick search on images, albums and uploads by text matching
    - Dashboard with
      - Statistics on images, storage and uploads
      - Favorite images
      - Latest uploads
    - Administrator page (app stats, users, roles and used / total quota)
    - Profile page with user details and statistics
    - Cloudflare proxy with cool domain name and e-mail forwarding
    - Sendgrid email sending mechanism
    - Postgres database with automatic database migration, SSL connection and on-rest encryption
    - Support HTTPS for production and HTTP for local development
    - JWT token for authenticated users
    - Docker containers for backend and frontend 
    - Docker compose for local development
    - Deployed on AWS - running in docker on EC2 free tier with ALB, hostname and CloudFlare protection
    ----
    - Photo page filtering for date range onf upload and taken, rating, favorites, etc.
    - Add lifecycle rules
      - Disable Bin option
      - Implement Frozen option
      - eventbridge trigger
      - lambda processor, iterating through rules and photos associated to these
    
    - Automate IaC
      - Frontend on S3, later possibly CloudFront (https://aws.plainenglish.io/how-to-host-your-react-application-in-aws-s3-c0940cd4377b)
      - CloudFormation with
        - Backend docker uploaded to ECR
        - Backend running in ECS from ECR
        - ALB deployed by CF
        - CloudWatch logs by CF
        - Credentials should come from AWS Systems Manager Parameter Store
    - Make image.Service serve just a single image, and have one image service per size
      - 3 levels for images (instead of 2)
        - raw
        - thumbnails
        - NEW fullscreen
    - Implement full search
    - add encryption for credentials in login and register
    - fix send message button on landing page
    - Revamp profile page
    - Deleted/Bin folder (shared ruleset?)
    - Display multiple image groups (group by date or smg)
    - Status message object should have no status, object should be kept though - KISS
    - Extract services from controllers. controllers should be about conversion between DB to JSON object
    - Encrypt settings file on EC2 - store private key to somewhere else - e.g. Google passwords 
    - Add history/audit - with SNS and DynamoDB
    - Create dark mode
    - Whitelist only CloudFlare domain !!!
    - Fix editing users and roles on admin page
    - Show quota on profile dropdown maybe?
  - Next steps:
    - Testing (handlers and unit testing) - Backend and Frontend
    - Investigate compression options for storage
    - Advanced concurrency for file upload
    - Add tags for images (MUI Chip)
    - Generative AI based on the decisions of the user (1to5 rating) to advise a score
    - Extract constants and Status/Error variables on top of Go modules
    - Refactor with dependency injection (no framework)
    - HATEOAS - links for objects
    - Create secondary image (~FHD size), optional on user preferences - for better image display
    - Add tooltips and info icons everywhere
    - Add filtering, ordering and pagination for images
    - Add batch uploading files
    - Implement advanced search (fulltext search with ES)

Backend:
- Add CSRF - https://www.stackhawk.com/blog/react-csrf-protection-guide-examples-and-how-to-enable-it/
- Move out GORM, use plain SQL instead
    - rewrite to plain SQL
    - create migration mechanism
- Think about integration tests
- Create microservices architecture
- Kubernetes IaC for microservices
