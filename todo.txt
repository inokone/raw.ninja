Functionality:
  - MVP:
    - Auth for single role - user
    - Upload RAW files with option for multiple files
    - Display file list - thumbnails
    - Display image with details and download option
    - Quick search by file names
    - Favorite option for images
    - Delete image
    - Dashboard (with the favorite images)
    - Profile page (connection details, registration date, image count, favorite count and used quota) 
    ----
    - Fix static code analysis issues
    - Optimize pointer usages for large object passing (Photo, Image, Descriptor)
    - Implement quota for free tier and global quota to protect for overflowing free limit at CDN
    - Integrate with at least 1 online RAW editor
    - Integrate with at least 1 CDN, so it can be deployed in Cloud
    - Add OpenID for Google/Facebook (https://codesandbox.io/s/react-zuxv1?file=/src/SignIn.tsx:997-1177, https://firebase.google.com/docs/auth/web/google-signin)
    - Create Free tier, display other tiers as disabled for now
    - Implement DDOS protection, captcha for registration and login
    - Set up proper godoc comments
    - Testing (handlers and unit testing) - Backend and Frontend
    - Fix PhotoGrid selection display mechanism
    - Create deployment in cloud (Google cloud and a CDN)
  - Next steps:
    - Add rating option for images
    - Add tags for images
    - Extract constants and Status/Error variables on top of Go modules
    - Refactor with dependency injection (no framework)
    - HATEOAS - links for objects
    - Create secondary image (~FHD size), optional on user preferences - for better image display
    - Add tooltips and info icons everywhere
    - Have a "rows" type of view for photos - photo with details next to it, potentially dwonload and favorite buttons
    - Add filtering, ordering and pagination for images
    - Add grouping for images
    - Add history/audit
    - Add batch uploading files
    - Add personal lifecycle rules
      - archive files after Y days
      - delete files after X days
      - keep favorites for indefinite
      - needs user preferences & CRONs
    - Implement advanced search (fulltext search with ES)

Frontend:
- Refactor React metadata view to use cards instead of tables (https://mui.com/material-ui/react-card/)

Backend:
- Add CSRF - https://www.stackhawk.com/blog/react-csrf-protection-guide-examples-and-how-to-enable-it/
- Move out GORM, use plain SQL instead
    - rewrite to plain SQL
    - create migration mechanism
- Think about integration tests
- Add AWS and GCP image storage implementation (S3, G CDN)
- Create microservices architecture
- Kubernetes IaC for microservices

- Free database: Elephantsql or Planetscale
- Free edge location: Vercel
