basePath: /api/v1
definitions:
  account.ConfirmationResend:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  account.PasswordChange:
    properties:
      new:
        type: string
      old:
        type: string
    required:
    - new
    - old
    type: object
  account.PasswordReset:
    properties:
      password:
        type: string
      token:
        type: string
    required:
    - password
    - token
    type: object
  account.Recovery:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  collection.CreateAlbum:
    properties:
      name:
        type: string
      photos:
        items:
          type: string
        type: array
      tags:
        items:
          type: string
        type: array
      user:
        type: string
    type: object
  collection.ListResp:
    properties:
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      photo_count:
        type: integer
      tags:
        items:
          type: string
        type: array
      thumbnail:
        $ref: '#/definitions/image.PresignedRequest'
    type: object
  collection.Resp:
    properties:
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      photos:
        items:
          $ref: '#/definitions/photo.Response'
        type: array
      tags:
        items:
          type: string
        type: array
    type: object
  common.Health:
    properties:
      status:
        type: string
      version:
        type: string
    type: object
  common.StatusMessage:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
  descriptor.Response:
    properties:
      favorite:
        type: boolean
      filename:
        type: string
      format:
        type: string
      id:
        type: string
      metadata:
        $ref: '#/definitions/image.Response'
      tags:
        items:
          type: string
        type: array
      thumbnail:
        type: string
      thumbnail_height:
        type: integer
      thumbnail_width:
        type: integer
      uploaded:
        type: string
    type: object
  image.PresignedRequest:
    properties:
      method:
        type: string
      mode:
        type: string
      url:
        type: string
    type: object
  image.Response:
    properties:
      ISO:
        type: integer
      aperture:
        type: number
      camera_make:
        type: string
      camera_model:
        type: string
      camera_sw:
        type: string
      colors:
        type: integer
      data_size:
        type: integer
      height:
        type: integer
      lens_make:
        type: string
      lens_model:
        type: string
      shutter:
        type: number
      timestamp:
        type: string
      width:
        type: integer
    type: object
  onetime.CreateAccess:
    properties:
      one_time:
        type: boolean
      original_id:
        type: string
    type: object
  onetime.Resp:
    properties:
      id:
        type: string
    type: object
  photo.Response:
    properties:
      descriptor:
        $ref: '#/definitions/descriptor.Response'
      id:
        type: string
      raw:
        $ref: '#/definitions/image.PresignedRequest'
      thumbnail:
        $ref: '#/definitions/image.PresignedRequest'
    type: object
  role.ProfileRole:
    properties:
      id:
        type: integer
      name:
        type: string
      quota:
        type: integer
    type: object
  rule.Action:
    properties:
      id:
        type: integer
      name:
        type: string
      targeted:
        type: boolean
    type: object
  rule.Constants:
    properties:
      actions:
        items:
          $ref: '#/definitions/rule.Action'
        type: array
      targets:
        items:
          $ref: '#/definitions/rule.Target'
        type: array
    type: object
  rule.CreateRule:
    properties:
      action_id:
        type: integer
      description:
        type: string
      name:
        type: string
      target_id:
        type: integer
      timing:
        type: integer
    type: object
  rule.Resp:
    properties:
      action:
        $ref: '#/definitions/rule.Action'
      description:
        type: string
      id:
        type: string
      name:
        type: string
      target:
        $ref: '#/definitions/rule.Target'
      timing:
        type: integer
    type: object
  rule.Target:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  ruleset.CreateRuleSet:
    properties:
      description:
        type: string
      name:
        type: string
      user_id:
        type: string
    type: object
  ruleset.Resp:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      rules:
        items:
          $ref: '#/definitions/rule.Resp'
        type: array
    type: object
  search.QuickSearchResp:
    properties:
      albums:
        items:
          $ref: '#/definitions/collection.ListResp'
        type: array
      photos:
        items:
          $ref: '#/definitions/photo.Response'
        type: array
      query:
        type: string
      uploads:
        items:
          $ref: '#/definitions/collection.ListResp'
        type: array
    type: object
  stats.AppStats:
    properties:
      albums:
        type: integer
      favorites:
        type: integer
      photos:
        type: integer
      quota:
        type: integer
      total_users:
        type: integer
      uploads:
        type: integer
      used_space:
        type: integer
      user_distribution:
        items:
          $ref: '#/definitions/user.RoleUser'
        type: array
    type: object
  stats.UserStats:
    properties:
      albums:
        type: integer
      available_space:
        type: integer
      email:
        type: string
      favorites:
        type: integer
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
      photos:
        type: integer
      quota:
        type: integer
      registration_date:
        type: integer
      role:
        type: string
      uploads:
        additionalProperties:
          type: integer
        type: object
      used_space:
        type: integer
    type: object
  user.Credentials:
    properties:
      captcha_token:
        type: string
      email:
        type: string
      password:
        type: string
    required:
    - captcha_token
    - email
    - password
    type: object
  user.Profile:
    properties:
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
      role:
        $ref: '#/definitions/role.ProfileRole'
      source:
        type: string
      status:
        type: string
    type: object
  user.Registration:
    properties:
      captcha_token:
        type: string
      email:
        type: string
      firstname:
        type: string
      lastname:
        type: string
      password:
        type: string
    required:
    - captcha_token
    - email
    - password
    type: object
  user.RoleUser:
    properties:
      role:
        type: string
      users:
        type: integer
    type: object
  user.SetEnabled:
    properties:
      enabled:
        type: boolean
      id:
        type: string
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
info:
  contact: {}
  description: RAW.Ninja is an application to store RAW image files.
  title: RAW.Ninja API
  version: "0.1"
paths:
  /account/confirm:
    get:
      consumes:
      - application/json
      description: Confirms the email address of the user
      parameters:
      - description: Token for the email confirmation
        format: uuid
        in: query
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.StatusMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.StatusMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.StatusMessage'
      summary: Email confirmation endpoint
  /account/login:
    post:
      consumes:
      - application/json
      description: Logs in the user, sets up the JWT authorization
      parameters:
      - description: Credentials provided for the login
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/user.Credentials'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.StatusMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.StatusMessage'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/common.StatusMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.StatusMessage'
      summary: User login endpoint
  /account/logout:
    get:
      consumes:
      - application/json
      description: Logs out of the application, deletes the JWT token uased for authorization
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.StatusMessage'
      summary: Logout endpoint
  /account/password/change:
    put:
      consumes:
      - application/json
      description: Resets the password of the logged in user
      parameters:
      - description: The new and old passwords, required to update the password
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/account.PasswordChange'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.StatusMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.StatusMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.StatusMessage'
      summary: Reset password endpoint
  /account/password/reset:
    put:
      consumes:
      - application/json
      description: Resets the password of the logged in user
      parameters:
      - description: The token and new password to reset the current set password
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/account.PasswordReset'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.StatusMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.StatusMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.StatusMessage'
      summary: Reset password endpoint
  /account/recover:
    put:
      consumes:
      - application/json
      description: Send a password reset email to a user
      parameters:
      - description: The email to send the account recovery to
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/account.Recovery'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/common.StatusMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.StatusMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.StatusMessage'
      summary: Recover account endpoint
  /account/resend:
    put:
      consumes:
      - application/json
      description: Resends email confirmation for an email address.
      parameters:
      - description: The email to send the confirmation to
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/account.ConfirmationResend'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.StatusMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.StatusMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.StatusMessage'
      summary: Resends email confirmation endpoint
  /account/signup:
    post:
      consumes:
      - application/json
      description: Signs the user up for the application
      parameters:
      - description: User data provided for the signup
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/user.Registration'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/common.StatusMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.StatusMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.StatusMessage'
      summary: User registration endpoint
  /albums/:
    get:
      consumes:
      - application/json
      description: Returns a list of albums for the user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/collection.Resp'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.StatusMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.StatusMessage'
      summary: endpoint for retrieving albums of a user
    post:
      consumes:
      - application/json
      description: Creates an album collection
      parameters:
      - description: Data provided for creating the album
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/collection.CreateAlbum'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/collection.Resp'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.StatusMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.StatusMessage'
      summary: Endpoint for creating an album collection.
  /albums/:id:
    delete:
      consumes:
      - application/json
      description: Deletes an album by the ID
      parameters:
      - description: ID of Collection to delete
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/collection.Resp'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.StatusMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.StatusMessage'
      summary: Endpoint fore deleting an album by ID.
    get:
      consumes:
      - application/json
      description: Returns an album by the ID
      parameters:
      - description: ID of Collection to retrieve
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/collection.Resp'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.StatusMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.StatusMessage'
      summary: Endpoint fore retrieving a album by ID.
    patch:
      consumes:
      - application/json
      description: Patches an album by the ID
      parameters:
      - description: ID of Collection to patch
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/collection.Resp'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.StatusMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.StatusMessage'
      summary: Endpoint for patching an album by ID.
  /auth/facebook:
    get:
      consumes:
      - application/json
      description: Starts Facebook authentication process.
      produces:
      - application/json
      responses: {}
      summary: Login is the authentication endpoint. Starts Facebook authentication
        process.
  /auth/facebook/redirect:
    get:
      consumes:
      - application/json
      description: Called by Facebook Auth when we have a result of the authentication
        process
      produces:
      - text/html
      responses: {}
      summary: Redirect is the authentication callback endpoint. Authenticates/Registers
        users, sets up JWT token.
  /auth/google:
    get:
      consumes:
      - application/json
      description: Starts Google authentication process.
      produces:
      - application/json
      responses: {}
      summary: Login is the authentication endpoint. Starts Google authentication
        process.
  /auth/google/redirect:
    get:
      consumes:
      - application/json
      description: Called by Google Auth when we have a result of the authentication
        process
      produces:
      - text/html
      responses: {}
      summary: Redirect is the authentication callback endpoint. Authenticates/Registers
        users, sets up JWT token.
  /healthcheck:
    get:
      consumes:
      - application/json
      description: Returns the status and version of the application
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.Health'
      summary: Health check endpoint of the Photostorage app
  /onetime/:
    post:
      consumes:
      - application/json
      description: Creates a one time access for the user
      parameters:
      - description: Data provided for creating the one time access
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/onetime.CreateAccess'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/onetime.Resp'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.StatusMessage'
        "415":
          description: Unsupported Media Type
          schema:
            $ref: '#/definitions/common.StatusMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.StatusMessage'
      summary: One time access creation endpoint
      tags:
      - rule
  /onetime/raw/:id:
    get:
      consumes:
      - application/json
      description: Returns the RAW file for the provided one time access ID
      parameters:
      - description: one time access ID of the RAW photo to download
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: integer
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.StatusMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.StatusMessage'
      summary: Download RAW file endpoint via one time access
      tags:
      - photos
  /photos:
    get:
      consumes:
      - application/json
      description: Returns all photo descriptors for the current user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/photo.Response'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.StatusMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.StatusMessage'
      summary: List user's photo descriptors endpoint
      tags:
      - photos
  /photos/:id:
    delete:
      consumes:
      - application/json
      description: Deletes the photo with the provided ID
      parameters:
      - description: ID of the photo to delete
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/photo.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.StatusMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.StatusMessage'
      summary: Delete photo endpoint
      tags:
      - photos
    get:
      consumes:
      - application/json
      description: Returns the photo descriptor with the provided ID
      parameters:
      - description: ID of the photo information to collect
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/photo.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.StatusMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.StatusMessage'
      summary: Get photo endpoint
      tags:
      - photos
    put:
      consumes:
      - application/json
      description: Updates tags and favorite setting for RAW file
      parameters:
      - description: ID of the photo to update
        in: path
        name: id
        required: true
        type: integer
      - description: The new version of the photo to use for update
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/photo.Response'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.StatusMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.StatusMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.StatusMessage'
      summary: Update photo endpoint for tags and favorite setting
      tags:
      - photos
  /photos/:id/raw:
    get:
      consumes:
      - application/json
      description: Returns the RAW file for the provided ID
      parameters:
      - description: ID of the RAW photo to download
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: integer
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.StatusMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.StatusMessage'
      summary: Download RAW file endpoint
      tags:
      - photos
  /photos/:id/thumbnail:
    get:
      consumes:
      - application/json
      description: Returns the thumbnail for the provided ID
      parameters:
      - description: ID of the thumbnail to download
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: integer
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.StatusMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.StatusMessage'
      summary: Thumbnail image endpoint
      tags:
      - photos
  /roles/:
    get:
      consumes:
      - application/json
      description: Lists all roles of the application
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.StatusMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.StatusMessage'
      summary: Role list endpoint
  /roles/:id:
    put:
      consumes:
      - application/json
      description: Updates the settings of a role
      parameters:
      - description: ID of the role information to patch
        in: path
        name: id
        required: true
        type: integer
      - description: The new version of the role to use for update
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/role.ProfileRole'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.StatusMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.StatusMessage'
      summary: Role update endpoint
  /rules/:
    get:
      consumes:
      - application/json
      description: Returns the list of rules for the user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/rule.Resp'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.StatusMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.StatusMessage'
      summary: endpoint for retrieving rules of a user
    post:
      consumes:
      - application/json
      description: Creates a lifecycle rule for the user
      parameters:
      - description: Data provided for creating the lifecycle rule
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/rule.CreateRule'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/rule.Resp'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.StatusMessage'
        "415":
          description: Unsupported Media Type
          schema:
            $ref: '#/definitions/common.StatusMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.StatusMessage'
      summary: Rule creation endpoint
      tags:
      - rule
  /rules/:id:
    get:
      consumes:
      - application/json
      description: Returns a rule by the ID
      parameters:
      - description: ID of rule to retrieve
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/rule.Resp'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.StatusMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.StatusMessage'
      summary: Endpoint for retrieving a rule by ID.
  /rules/constants:
    get:
      consumes:
      - application/json
      description: Returns the constants used for rule creation
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/rule.Constants'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.StatusMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.StatusMessage'
      summary: Endpoint for retrieving constants for rule creation.
  /rulesets/:
    get:
      consumes:
      - application/json
      description: Returns a list of rule sets for the user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ruleset.Resp'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.StatusMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.StatusMessage'
      summary: endpoint for retrieving rule sets of a user
    post:
      consumes:
      - application/json
      description: Creates a lifecycle rule set for the user
      parameters:
      - description: The data to use for creating the ruleset
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/ruleset.CreateRuleSet'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/ruleset.Resp'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.StatusMessage'
        "415":
          description: Unsupported Media Type
          schema:
            $ref: '#/definitions/common.StatusMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.StatusMessage'
      summary: Rule set creation endpoint
      tags:
      - rule
  /rulesets/:id:
    delete:
      consumes:
      - application/json
      description: Deletes a rule set by the ID
      parameters:
      - description: ID of rule set to delete
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.StatusMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.StatusMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.StatusMessage'
      summary: Endpoint fore deleting a rule set by ID.
    get:
      consumes:
      - application/json
      description: Returns a rule set by the ID
      parameters:
      - description: ID of rule set to retrieve
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ruleset.Resp'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.StatusMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.StatusMessage'
      summary: Endpoint fore retrieving a rule set by ID.
    put:
      consumes:
      - application/json
      description: Updates a lifecycle rule set for the user
      parameters:
      - description: ID of the role to update
        in: path
        name: id
        required: true
        type: integer
      - description: The ruleset to be updated
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/ruleset.Resp'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/ruleset.Resp'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.StatusMessage'
        "415":
          description: Unsupported Media Type
          schema:
            $ref: '#/definitions/common.StatusMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.StatusMessage'
      summary: Rule set updating endpoint
      tags:
      - rule
  /search/favorites:
    get:
      consumes:
      - application/json
      description: Returns favorite photo descriptors for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/photo.Response'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.StatusMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.StatusMessage'
      summary: Search user's favorite photo descriptors endpoint
      tags:
      - photos
  /search/quick:
    get:
      consumes:
      - application/json
      description: Returns all photo descriptors matching the provided search text
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/search.QuickSearchResp'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.StatusMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.StatusMessage'
      summary: Quick search user's photo descriptors endpoint, case sensitive prefix
        search
      tags:
      - photos
  /statistics/app:
    get:
      consumes:
      - application/json
      description: Returns the app statistics on stored photos
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/stats.AppStats'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.StatusMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.StatusMessage'
      summary: App statistics endpoint
  /statistics/user:
    get:
      consumes:
      - application/json
      description: Returns the user statistics on stored photos
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/stats.UserStats'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.StatusMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.StatusMessage'
      summary: User statistics endpoint
  /uploads/:
    get:
      consumes:
      - application/json
      description: Returns a list of uploads for the user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/collection.Resp'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.StatusMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.StatusMessage'
      summary: endpoint for retrieving uploads of a user
    post:
      consumes:
      - multipart/form-data
      description: Upload RAW files to store
      parameters:
      - description: Photos to store
        in: formData
        name: files[]
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.StatusMessage'
        "415":
          description: Unsupported Media Type
          schema:
            $ref: '#/definitions/common.StatusMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.StatusMessage'
      summary: Photo upload endpoint
      tags:
      - photos
  /uploads/:id:
    get:
      consumes:
      - application/json
      description: Returns an upload by the ID
      parameters:
      - description: ID of Collection to retrieve
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/collection.Resp'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.StatusMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.StatusMessage'
      summary: Endpoint fore retrieving an upload by ID.
  /users:
    get:
      consumes:
      - application/json
      description: Lists the users of the application.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.StatusMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.StatusMessage'
      summary: List users endpoint
  /users/:id:
    patch:
      consumes:
      - application/json
      description: Updates the target user
      parameters:
      - description: ID of the user information to patch
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.StatusMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.StatusMessage'
      summary: User update endpoint
    put:
      consumes:
      - application/json
      description: Updates the target user
      parameters:
      - description: ID of the user information to patch
        in: path
        name: id
        required: true
        type: integer
      - description: The new version of the user information to use for update
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/user.Profile'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.StatusMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.StatusMessage'
      summary: User update endpoint
  /users/:id/enabled:
    put:
      consumes:
      - application/json
      description: Updates the target user
      parameters:
      - description: ID of the user information to patch
        in: path
        name: id
        required: true
        type: integer
      - description: Whether the user is enabled to log in and upload photos
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/user.SetEnabled'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.StatusMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.StatusMessage'
      summary: User enable/disable endpoint
  /users/profile:
    get:
      consumes:
      - application/json
      description: Gets the current logged in user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.Profile'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/common.StatusMessage'
      summary: Get user profile endpoint
swagger: "2.0"
